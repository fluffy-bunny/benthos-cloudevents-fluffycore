// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pkg/proto/cloudeventprocessor/cloudeventprocessor.proto

package cloudeventprocessor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudEventProcessor_ProcessCloudEvents_FullMethodName = "/pkg.proto.cloudeventprocessor.CloudEventProcessor/ProcessCloudEvents"
)

// CloudEventProcessorClient is the client API for CloudEventProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudEventProcessorClient interface {
	// Processes a batch of cloud events.  This is an all or nothing operation.  If any of the events fail to process, then the entire batch is considered a failure.
	ProcessCloudEvents(ctx context.Context, in *ProcessCloudEventsRequest, opts ...grpc.CallOption) (*ProcessCloudEventsResponse, error)
}

type cloudEventProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudEventProcessorClient(cc grpc.ClientConnInterface) CloudEventProcessorClient {
	return &cloudEventProcessorClient{cc}
}

func (c *cloudEventProcessorClient) ProcessCloudEvents(ctx context.Context, in *ProcessCloudEventsRequest, opts ...grpc.CallOption) (*ProcessCloudEventsResponse, error) {
	out := new(ProcessCloudEventsResponse)
	err := c.cc.Invoke(ctx, CloudEventProcessor_ProcessCloudEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudEventProcessorServer is the server API for CloudEventProcessor service.
// All implementations must embed UnimplementedCloudEventProcessorServer
// for forward compatibility
type CloudEventProcessorServer interface {
	// Processes a batch of cloud events.  This is an all or nothing operation.  If any of the events fail to process, then the entire batch is considered a failure.
	ProcessCloudEvents(context.Context, *ProcessCloudEventsRequest) (*ProcessCloudEventsResponse, error)
	mustEmbedUnimplementedCloudEventProcessorServer()
}

// UnimplementedCloudEventProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedCloudEventProcessorServer struct {
}

func (UnimplementedCloudEventProcessorServer) ProcessCloudEvents(context.Context, *ProcessCloudEventsRequest) (*ProcessCloudEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessCloudEvents not implemented")
}
func (UnimplementedCloudEventProcessorServer) mustEmbedUnimplementedCloudEventProcessorServer() {}

// UnsafeCloudEventProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudEventProcessorServer will
// result in compilation errors.
type UnsafeCloudEventProcessorServer interface {
	mustEmbedUnimplementedCloudEventProcessorServer()
}

func RegisterCloudEventProcessorServer(s grpc.ServiceRegistrar, srv CloudEventProcessorServer) {
	s.RegisterService(&CloudEventProcessor_ServiceDesc, srv)
}

func _CloudEventProcessor_ProcessCloudEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessCloudEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudEventProcessorServer).ProcessCloudEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudEventProcessor_ProcessCloudEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudEventProcessorServer).ProcessCloudEvents(ctx, req.(*ProcessCloudEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudEventProcessor_ServiceDesc is the grpc.ServiceDesc for CloudEventProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudEventProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.proto.cloudeventprocessor.CloudEventProcessor",
	HandlerType: (*CloudEventProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessCloudEvents",
			Handler:    _CloudEventProcessor_ProcessCloudEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/cloudeventprocessor/cloudeventprocessor.proto",
}
