// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pkg/proto/centrifuge/centrifuge.proto

package centrifuge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CentrifugePositionService_StoreStreamPosition_FullMethodName = "/pkg.proto.centrifuge.CentrifugePositionService/StoreStreamPosition"
	CentrifugePositionService_GetStreamPosition_FullMethodName   = "/pkg.proto.centrifuge.CentrifugePositionService/GetStreamPosition"
)

// CentrifugePositionServiceClient is the client API for CentrifugePositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentrifugePositionServiceClient interface {
	StoreStreamPosition(ctx context.Context, in *StoreStreamPositionRequest, opts ...grpc.CallOption) (*StoreStreamPositionResponse, error)
	GetStreamPosition(ctx context.Context, in *GetStreamPositionRequest, opts ...grpc.CallOption) (*GetStreamPositionResponse, error)
}

type centrifugePositionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCentrifugePositionServiceClient(cc grpc.ClientConnInterface) CentrifugePositionServiceClient {
	return &centrifugePositionServiceClient{cc}
}

func (c *centrifugePositionServiceClient) StoreStreamPosition(ctx context.Context, in *StoreStreamPositionRequest, opts ...grpc.CallOption) (*StoreStreamPositionResponse, error) {
	out := new(StoreStreamPositionResponse)
	err := c.cc.Invoke(ctx, CentrifugePositionService_StoreStreamPosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centrifugePositionServiceClient) GetStreamPosition(ctx context.Context, in *GetStreamPositionRequest, opts ...grpc.CallOption) (*GetStreamPositionResponse, error) {
	out := new(GetStreamPositionResponse)
	err := c.cc.Invoke(ctx, CentrifugePositionService_GetStreamPosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentrifugePositionServiceServer is the server API for CentrifugePositionService service.
// All implementations must embed UnimplementedCentrifugePositionServiceServer
// for forward compatibility
type CentrifugePositionServiceServer interface {
	StoreStreamPosition(context.Context, *StoreStreamPositionRequest) (*StoreStreamPositionResponse, error)
	GetStreamPosition(context.Context, *GetStreamPositionRequest) (*GetStreamPositionResponse, error)
	mustEmbedUnimplementedCentrifugePositionServiceServer()
}

// UnimplementedCentrifugePositionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCentrifugePositionServiceServer struct {
}

func (UnimplementedCentrifugePositionServiceServer) StoreStreamPosition(context.Context, *StoreStreamPositionRequest) (*StoreStreamPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreStreamPosition not implemented")
}
func (UnimplementedCentrifugePositionServiceServer) GetStreamPosition(context.Context, *GetStreamPositionRequest) (*GetStreamPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamPosition not implemented")
}
func (UnimplementedCentrifugePositionServiceServer) mustEmbedUnimplementedCentrifugePositionServiceServer() {
}

// UnsafeCentrifugePositionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentrifugePositionServiceServer will
// result in compilation errors.
type UnsafeCentrifugePositionServiceServer interface {
	mustEmbedUnimplementedCentrifugePositionServiceServer()
}

func RegisterCentrifugePositionServiceServer(s grpc.ServiceRegistrar, srv CentrifugePositionServiceServer) {
	s.RegisterService(&CentrifugePositionService_ServiceDesc, srv)
}

func _CentrifugePositionService_StoreStreamPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreStreamPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrifugePositionServiceServer).StoreStreamPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CentrifugePositionService_StoreStreamPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrifugePositionServiceServer).StoreStreamPosition(ctx, req.(*StoreStreamPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentrifugePositionService_GetStreamPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrifugePositionServiceServer).GetStreamPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CentrifugePositionService_GetStreamPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrifugePositionServiceServer).GetStreamPosition(ctx, req.(*GetStreamPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CentrifugePositionService_ServiceDesc is the grpc.ServiceDesc for CentrifugePositionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CentrifugePositionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.proto.centrifuge.CentrifugePositionService",
	HandlerType: (*CentrifugePositionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreStreamPosition",
			Handler:    _CentrifugePositionService_StoreStreamPosition_Handler,
		},
		{
			MethodName: "GetStreamPosition",
			Handler:    _CentrifugePositionService_GetStreamPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/centrifuge/centrifuge.proto",
}
